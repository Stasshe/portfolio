name: Create Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get previous tag
        if: steps.check_tag.outputs.exists == 'false'
        id: prev_tag
        run: |
          # 前回のタグを取得（存在しない場合は初めてのタグとする）
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using first commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate changelog
        if: steps.check_tag.outputs.exists == 'false'
        id: changelog
        run: |
          # 前回のタグから現在までのコミット履歴を取得
          PREV_TAG="${{ steps.prev_tag.outputs.prev_tag }}"
          echo "Generating changelog from $PREV_TAG to HEAD"
          
          # コミットログを整形してGitHub Outputに保存
          if [[ "$PREV_TAG" == *"v"* ]]; then
            COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            # 最初のリリースの場合は全てのコミットを含める
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # 変更がない場合のデフォルトメッセージ
          if [ -z "$COMMITS" ]; then
            COMMITS="- 変更なし（コミットがありません）"
          fi
          
          # マルチラインの出力を保存
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Release v${{ steps.version.outputs.version }}
            
            **リリース日:** `$(date '+%Y-%m-%d')`
            
            ### 🔄 変更内容
            
            ${{ steps.changelog.outputs.COMMITS }}
            
            ### 📦 インストール方法
            ```bash
            npm install
            npm run dev
            ```
            
            **完全な変更履歴**: [比較を表示](https://github.com/${{ github.repository }}/compare/${{ steps.prev_tag.outputs.prev_tag }}...v${{ steps.version.outputs.version }})
          draft: false
          prerelease: false

      - name: Release already exists
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "::warning::Release v${{ steps.version.outputs.version }} already exists. Please update the version in package.json first."
          exit 1